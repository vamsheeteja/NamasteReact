Live codes all sequence

241222-Inception_L1

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Namaste React</title>
</head>
<body>
    <div id="root"></div>
</body>

<script>

    const heading = document.createElement("h1");
    heading.innerHTML = "Namaste Everyone from JavaScript";

    const root = document.getElementById("root");
    root.appendChild(heading);
</script>
</html>

-- Now doing the above same code using React

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Namaste React</title>
</head>
<body>
    <div id="root"></div>
</body>

<script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
<script>
    const heading = React.createElement("h1", {}, "Namaste from React");

    const root = ReactDOM.createRoot(document.getElementById("root"));

    root.render(heading);

</script>
</html>

====================================================================================================================
311222 - IGNITING OUR APP
Lec 2

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Namaste React</title>
    <link rel="stylesheet" href="index.css">
</head>
<body>
    <div id="root">Not Rendered</div>
</body>
[[[[REMOVED CDN]]]]
<script src="App.js" type="module"></script> // type = "module"
</html>

App.js

ADDED AT STARTING
import React from "react";
import ReactDOM from "react-dom/client"
---CODE---
import React from "react";
import ReactDOM from "react-dom/client"

const heading1 = React.createElement(
    "h1",
    {id: "h1", key:"h1"},
    "Namaste from React13"
    );

const heading2 = React.createElement(
    "h2", 
    {id: "h2", key:"h2"}, 
    "Namaste from React23"
    );

const container = React.createElement(
    "div",
    {
        id:"container"
    },
    [heading1, heading2], // React Reconcilation Key: When ever we have list of children, we have to give keys to each of them. key can be anything which uniquely identifies it
    "Namasteüôè i am a container from React."
    
)
const root = ReactDOM.createRoot(document.getElementById("root"));



root.render(container);

============================================================================================================

10123 - Laying the Foundation

Babel, keys - React key Reconcilation (imp), JSX, Components, functional component bts is just a js function (piece of code)

Nice questions
// Q.1 will jsx work if parcel is not installed as babel dependency in parcel
jsx wont work if parcel is not there, but if babel is there then it will work.
// Q.2 Is Component hoisted.
at the end of the day Component is simple js function so think..

BEHIND THE SCENES
Jsx behind the scenes using React.createElement
React.createElement bts is an object 
and object are rendered on the html dom.


Lecture 3 

Pain of using React.createElement()

App.js file

"""start

import React from "react";
import ReactDOM from "react-dom/client"


/*
<div>
    <h1></h1>
    <ul> 
        <li>About us</li>
        <li>Support<</li>
        <li>Home</li>
    </ul>
</div>

*/
// React Reconcilation Key: When ever we have list of children, we have to give keys to each of them. key can be anything which uniquely identifies it
// we can write any thing in jsx {1+2}, call a function {Title()}

// This will be a HUGE MESS...................
const heading2 = React.createElement(
    "h2", 
    {id: "h2", key:"h2"}, 
    "Namaste from React23"
    );

const container = React.createElement(
    "div",
    {
        id:"container"
    },
    [
        React.createElement(
        "h1",
        {
            id: "h1", 
            key:"h1"
        },
        "Namaste from React"
        ), 
        React.createElement(
            "ul",
            {},
            [
                React.createElement(
                    "li",
                    {},
                    "About Us"
                ),
                React.createElement(
                    "li",
                    {},
                    "Support"
                ),
                React.createElement(
                    "li",
                    {},
                    "Home"
                )
            ]
        )
    ], 
    "Namasteüôè i am a container from React."
    
)
const root = ReactDOM.createRoot(document.getElementById("root"));



root.render(container);

"""end


App.js file
// functional components

"""start

import React from 'react'
import ReactDOM from 'react-dom/client'

const heading = (
  <h1 id="title" key="h1">
    Namaste React
  </h1>
)

// React Component
// Functional - NEW way of writing component: a piece of js code (js function)
// - Name of component starts with capital letter - good practise

const HeaderComponent = () => {
  // if one line return the --> return <h1> Namaste React functional component </h1>; (semicolon)
  // for multiple lines use parenthesis.
  // we can aslo skip 'return' statement.
  return (
    <div>
      <h1> Namaste React functional component </h1>
      <h2>This is a h2 tag</h2>
    </div>
  )
}

// also correct // VALID
// (O.O) obervation. when we use below kind of definition to create funcitonal definitions. Then the component is ONLY RENDERING if the component name is STARTING WITH A CAPITAL LETTER.

const HeaderComponent2 = () => (
  <div>
    <h1> Namaste React functional component 2</h1>
    <h2>This is a h2 tag</h2>
  </div>
)

const root = ReactDOM.createRoot(document.getElementById('root'))

root.render(heading)


"""end

// practice This

App.js
"""start
import React from 'react'
import ReactDOM from 'react-dom/client'

// JSX..
const heading = (
  <h1 id="title" key="h1">
    Namaste React
  </h1>
)

// Functional Component : a normal javascript function
const Title = () => (
  <h1 id="title" key="h1">
    Title: Namaste React
  </h1>
)

const stringxyz = 'cool'

// Functional component
const HeaderComponent = () => {
  return (
    <div>
      {console.log('Any JS code!!')}
      {stringxyz}
      {1 + 2}
      {/* of Freaking man! Since a Component is just a normal JS function we can call it like this...OP */}
      {Title()}
      {/* using components */}
      <Title /> {/* This is component composition / composing components*/}
      {/* to use a JSX (a normal variable) or react element (react object) in a component we use these curly braces*/}
      {heading} omg React.js is Awesome!!
      <h1> Namaste React functional component </h1>
      <h2>This is a h2 tag</h2>
    </div>
  )
}

const root = ReactDOM.createRoot(document.getElementById('root'))

// async defer
root.render(<HeaderComponent />) // rendering a react functional component

"""end

Lecture-4 Talk is cheap! Show me the code

before starting App.js
import ReactDOM from 'react-dom/client'

const Title = () => (
  <h1 id="title" key="h1">
    Namaste React
  </h1>
)

// Functional component : a normal javascript function
const HeaderComponent = () => {
  return (
    <div>
      <Title /> {/* Good practice */}
      <h1> Namaste React functional component </h1>
      <h2>This is a h2 tag</h2>
    </div>
  )
}

const root = ReactDOM.createRoot(document.getElementById('root'))

// async defer
root.render(<HeaderComponent />) // rendering a react functional component

----------

Lecture 4 Talk is cheap! Show me the Code

/*
  * Header
    * Logo
    * List Items(Right Side)
    * Cart
    
  * Body
    * Search Box
    * RestaurantList
      * RestaurantCard (Many Cards)
        * Image
        * Name
        * Rating
        * Cuisines
  
  * Footer
    * Links
    * Copyrights

*/

// React.Fragment is like an Empty tag
const AppLayout = () => {
  return (
    <>
      {/* IMP we can use <React.Fragment> also here. it is because Jsx allows only ONE PARENT here */}
      <Header />
      <Body />
      <Footer />
    </>
  )
}
-===========--------============---------=============---------===============
Time stamp 1:00:05 Inline Styling in React

// giving inline css in the jsx

const styleObj = {
  backgroundColor: "red",                  // this is just a js object
}

const jsx = (
  <div style={styleObj // this is taking a js object}>
    <h1> JSX </h1>
    <h1> Second JSX </h1>
  </div> 
)

some people 

const jsx = (
  <div style={{
  backgroundColor: "red",       // Samething           
  }}>
    <h1> JSX </h1>
    <h1> Second JSX </h1>
  </div> 
)

+++++++++++-----------=================-------------=================

can we use React.Fragment inside React.Fragment

yes it was working fine

const AppLayout = () => {
  return (
    <>
      <React.Fragment>
        <Header />
        <Body />
        <Footer />
      </React.Fragment>
    </>
  )
}

------------

Optional Chaining

?

------------

Go through timestamps file also

---++++++++============++++++++++++++++========


Lecture 5 Let's get Hooked..

(new) folder created 'src'
moved App.js into it.
inside src (new) folder created named 'components' 

App.js

import React from 'react'
import ReactDOM from 'react-dom/client'
// Default Import - In the defaault export (import) we can rename like header.. VALID..
import Header from './components/Header.js' we can write header.js or .jsx
// Named Import 
import { Title } from './components/Header' 
//  This is not object De-Structuring.
const {Title} = obj; this wont work 
obj.Title not a valid thing

// suppose if we want to import all the components
import * as OBj from "../components/Header"

// Represent it as js object
--- data js object - removed for better readability.

const RestaurantCard = ({ cloudinaryImageId, name, cuisines, avgRating }) => {
  return (
    <div className="card">
      <img
        src={
          'https://res.cloudinary.com/swiggy/image/upload/fl_lossy,f_auto,q_auto,w_264,h_288,c_fill/' +
          cloudinaryImageId
        }
      />
      <h2>{name}</h2>
      <h3>{cuisines.join(', ')}</h3>
      <h4>{avgRating}‚≠ê</h4>
    </div>
  )
}

// no key (Not acceptible) <<<< Index key (use ONLY if you don't have anythind) <<<<<<<< unique key (best practice)
const Body = () => {
  return (
    <div className="restaurant-list">
      {restaurantList.map((restaurant) => {
        {
          /*... - SPREAD Operator */
        }
        return <RestaurantCard {...restaurant.info} key={restaurant.info.id} />
      })}
    </div>
  )
}

const Footer = () => {
  return <h4> Footer </h4>
}

// Structure you layout
const AppLayout = () => {
  return (
    <React.Fragment>
      <Title />
      <Header />
      <Body />
      <Footer />
    </React.Fragment>
  )
}
const root = ReactDOM.createRoot(document.getElementById('root'))

// async defer
root.render(<AppLayout />) // rendering a react functional component


----- (new file created) Header.js

// export const Title = () => ( -- since i dont want to export it i want it to be Title in Header component.
const Title = () => (
  // another way of exporting, ie exporting by a name
  <a href="/">
    <img
      className="logo"
      alt="logo"
      src="https://yt3.ggpht.com/ytc/AMLnZu_EC-ECXAxRAixWGEfMsE1rdSoetBHyxmLNdtCB=s900-c-k-c0x00ffffff-no-rj"
    />
  </a>
)

const Header = () => {
  return (
    <div className="header">
      <Title />
      <div className="nav-items">
        <ul>
          <li>Home</li>
          <li>About</li>
          <li>Contact</li>
          <li>Cart</li>
        </ul>
      </div>
    </div>
  )
}

export default Header // We can just export default only one thing.

-- Header.js #2
// export const Title = () => ( -- since i dont want to export it i want it to be Title in Header component.
const Title = () => (
  <a href="/">
    <img
      className="logo"
      alt="logo"
      src="https://yt3.ggpht.com/ytc/AMLnZu_EC-ECXAxRAixWGEfMsE1rdSoetBHyxmLNdtCB=s900-c-k-c0x00ffffff-no-rj"
    />
  </a>
)

const Header = () => {
  return (
    <div className="header">
      <Title />
      <div className="nav-items">
        <ul>
          <li>Home</li>
          <li>About</li>
          <li>Contact</li>
          <li>Cart</li>
        </ul>
      </div>
    </div>
  )
}

export default Header // We can just export default only one thing.

(new file created) Body.js
const Body = () => {
  return (
    <div className="restaurant-list">
      {restaurantList.map((restaurant) => {
        {
          /*... - SPREAD Operator */
        }
        return <RestaurantCard {...restaurant.info} key={restaurant.info.id} />
      })}
    </div>
  )
}

export default Body

(new file) Footer.js

(new file) config.js will contain all the HARDCODED Values of my program

(Body.js modified) VERY IMPORTANT useState() and HOOKs Explained from timestamp 55:00 Lec-5

-- 1
import RestaurantCard from './RestaurantCard'
import { restaurantList } from '../config'


const Body = () => {
  let searchTxt = 'KFC'
  return (
    <>
      <div className="search-container">
        <input
          type="text"
          className="search-input"
          placeholder="Search"
          value={searchTxt}
          // #1 onChange={(e) => console.log('kachabadam')}
          // whenever input is changed this onChangeInput function will be called.
          // #2 onChange={(e) => console.log(e.target.value)} When we click any char it get displayed on the console. But WHY DOES ITS NOT PRINTING ON THE SEARCH INPUT ? -IMP
          // Ans: When ever you change/write something inside the input .. React RE-RENDERS THE COMPONENT BUT THE searchTxt value is STILL the same. We have HARDCODED THAT VALUE. we have to somehow MODIFY THAT VALUE.

          // can i change the value from here
          onChange={(e) => (searchTxt = e.target.value)} // this wont work...

          // To make this work
          // LOCAL VARIABLES LIKE searchTxt = 'KFC' are NOT PREFERRED IN REACT.
          // when ever you have to change the variable that you have used
          // If you need to maintain a variable that changes itself then you need to maintain a variable that is a React kind of variable ..

          // The React variable is a kind of State Variable
          // Every component in React maintains a State. You can put all the variable into the State
          // Every time you create a local-variable it is recomm to use State in it.

          // What is State?
        />
        <button className="search-btn">Search</button>
      </div>
      <div className="restaurant-list">
        {restaurantList.map((restaurant) => {
          return (
            <RestaurantCard {...restaurant.info} key={restaurant.info.id} />
          )
        })}
      </div>
    </>
  )
}

export default Body

-- 2

import RestaurantCard from './RestaurantCard'
import { restaurantList } from '../config'
import { useState } from 'react'

const Body = () => {
  // Every COMPONENT IN React maintains a State and we can put all the variables into that state.
  // And every time we have to create Local Variable you use STATE init.

  // WHAT IS STATE ?
  // WHAT IS HOOKS ?
  // Hooks are nothing kind of normal FUNCTIONS. Every HOOK has a specific Function associated with it
  // WHAT IS useState ? // useState() is used to create State variables

  // useState() HOOK
  // searchText is local state variable
  const [searchText] = useState('KFC') // KFC is the default value. 
  // The useState() Hook/function returns an Array. First element is the variable name `searchText`
  
  /*
    * Input doesnt work like that in react.so we write input we need to do Data mining to it. need to do 
    * ONE Way - data binding.

  */
  return (
    <>
      <div className="search-container">
        <input
          type="text"
          className="search-input"
          placeholder="Search"
          value={searchText}
          onChange={(e) => (searchTxt = e.target.value)} // this wont work...
        />
        <button className="search-btn">Search</button>
      </div>
      <div className="restaurant-list">
        {restaurantList.map((restaurant) => {
          return (
            <RestaurantCard {...restaurant.info} key={restaurant.info.id} />
          )
        })}
      </div>
    </>
  )
}

export default Body


-- 3 
import RestaurantCard from './RestaurantCard'
import { restaurantList } from '../config'
import { useState } from 'react'

// WHAT IS STATE ?
// WHAT IS HOOKS ?
// Hooks are nothing kind of normal FUNCTIONS. Every HOOK has a specific Function associated with it
// WHAT IS useState ? // useState() is used to create State variables

const Body = () => {
  const searchVar = useState()

  const [searchText, setSearchText] = searchVar // js destructing.

  // const [searchText, setSearchText] = useState('hellow') // returns = [variable name, function to update the variable]

  // this concept of creating a local variable in React is equivalent  to
  // const stext = "hellow"; -- in js

  return (
    <>
      <div className="search-container">
        <input
          type="text"
          className="search-input"
          placeholder="Search"
          value={searchText}
          onChange={(e) => (searchTxt = e.target.value)} // this wont work...
        />
        <button className="search-btn">Search</button>
      </div>
      <div className="restaurant-list">
        {restaurantList.map((restaurant) => {
          return (
            <RestaurantCard {...restaurant.info} key={restaurant.info.id} />
          )
        })}
      </div>
    </>
  )
}

export default Body

-- 4

import RestaurantCard from './RestaurantCard'
import { restaurantList } from '../config'
import { useState } from 'react'

// WHAT IS STATE ?
// WHAT IS HOOKS ?
// Hooks are nothing kind of normal FUNCTIONS. Every HOOK has a specific Function associated with it
// WHAT IS useState ? // useState() is used to create State variables

const Body = () => {
  const [searchText, setSearchText] = useState('hellow') // returns = [variable name, function to update the variable]

  return (
    <>
      <div className="search-container">
        <input
          type="text"
          className="search-input"
          placeholder="Search"
          value={searchText}
          onChange={(e) => {
            setSearchText(e.target.value)
          }} // we get automatically an event property `e`. From this event prop i can read what ever we type on the search box using e.target.value
        />
        <h1>{searchText}</h1>
        {/* This is called a 2 way binding. Becz we are updating the searchText and it is getting update and also showwing the updated value also We are writing and Reading searchText at atht sametime.*/}
        <button className="search-btn">Search</button>
      </div>
      <div className="restaurant-list">
        {restaurantList.map((restaurant) => {
          return (
            <RestaurantCard {...restaurant.info} key={restaurant.info.id} />
          )
        })}
      </div>
    </>
  )
}

export default Body

-- 5

import RestaurantCard from './RestaurantCard'
import { restaurantList } from '../config'
import { useState } from 'react'

// WHAT IS STATE ?
// WHAT IS HOOKS ?
// Hooks are nothing kind of normal FUNCTIONS. Every HOOK has a specific Function associated with it
// WHAT IS useState ? // useState() is used to create State variables
// Why do we use State variables when we have local variables ?
// Everytime you want your variables to be in sync with the UI you need to use your state variables.
// For example if you have a local variable let a = 10; now if some component changed its value to 11 then React doesn't know that it was changed and so it will not be RE-RENDERED..that is it still be 10 on the UI. So for telling react that a variable need to be in sync with UI we need to use useState() hook.
const Body = () => {
  const [searchText, setSearchText] = useState('hellow') // returns = [variable name, function to update the variable]

  return (
    <>
      <div className="search-container">
        <input
          type="text"
          className="search-input"
          placeholder="Search"
          value={searchText}
          onChange={(e) => {
            setSearchText(e.target.value)
          }}
        />
        <h1>{searchText}</h1>
        <button className="search-btn">Search</button>
      </div>
      <div className="restaurant-list">
        {restaurantList.map((restaurant) => {
          return (
            <RestaurantCard {...restaurant.info} key={restaurant.info.id} />
          )
        })}
      </div>
    </>
  )
}

export default Body


-- 6 import RestaurantCard from './RestaurantCard'
import { restaurantList } from '../config'
import { useState } from 'react'

// WHAT IS STATE ?
// WHAT IS HOOKS ?
// Hooks are nothing kind of normal FUNCTIONS. Every HOOK has a specific Function associated with it
// WHAT IS useState ? // useState() is used to create State variables

const Body = () => {
  const [searchText, setSearchText] = useState('hellow') // returns = [variable name, function to update the variable]

  //lets create one more state variable
  const [searchClicked, setSearchClicked] = useState('false')
  return (
    <>
      <div className="search-container">
        <input
          type="text"
          className="search-input"
          placeholder="Search"
          value={searchText}
          onChange={(e) => {
            setSearchText(e.target.value)
          }}
        />
        <h1>{searchText}</h1>

        <h2>{searchClicked}</h2>
        {/* SO HOW IT IS APPEARING ON THE UI
         * When we create a varible using useState, React is WATCHING this variable, React is keeping a track of this variables.
         * When i click on `Search` button, my whole component GETS RE-RENDERED
         * that is WHENEVER THIS VARIABLES GETS UPDATED THE WHOLE COMPONENT GETS RE-RENDERED.
         * IT IS destroying the Body component and Re constructing the component again. It is happening very fast. RECONCILIATION IS HAPPENING.
         * It is doing a DIFF algorithm
         */}
        <button
          className="search-btn"
          onClick={() => {
            if (searchClicked === true) searchClicked('false')
            else setSearchClicked('true')
          }}
        >
          Search
        </button>
      </div>
      <div className="restaurant-list">
        {restaurantList.map((restaurant) => {
          return (
            <RestaurantCard {...restaurant.info} key={restaurant.info.id} />
          )
        })}
      </div>
    </>
  )
}

export default Body

-- 7
-- above same code 
-- represents only small portions of the code

        <h1>{searchText}</h1>

        <h2>{searchClicked}</h2>
        <button
          className="search-btn"
          onClick={() => {
            // create a TOGGLE YEYYY!
            // React just updates this portion after Re-rendering this whole component.
            // It is using Reconciliation algorithm that uses a DIFF algorithm
            if (searchClicked === 'true') setSearchClicked('false')
            else setSearchClicked('true')
          }}
        >

---
function filterData(searchText, restaurants) {
  const filterData = restaurants.filter((restaurant) =>
    restaurant.info.name.includes(searchText),
  )
  return filterData
  // Above code in one line
  // return restaurants.filter((restaurant) => restaurant.info.name.includes(searchText))
}

-- Last from App.js of Lect 5

// questions 

why after updating the useState() it was not working then ?
search bar was not working

+++===============++++++++++++++++======================================


