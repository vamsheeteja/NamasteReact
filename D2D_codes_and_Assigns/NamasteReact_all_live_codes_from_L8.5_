TS: 1:00:00

#3 setCount in CBCs

profile.js (Functional Component)

import { useState } from 'react'

const Profile = (props) => {
  const [count, setCount] = useState(0)
  const [count2, setCount2] = useState(0)

  return (
    <div>
      <h2> Profile Component</h2>
      <h3> Name: {props.name}</h3>
      <h3> Count: {count} </h3>
      <button
        onClick={() => {
          setCount(1)
          setCount2(1)
        }}
      >
        Count
      </button>
    </div>
  )
}

export default Profile

ProfileClass.js file. (equivalent Class Component file)

import React from 'react'

class Profile extends React.Component {
  // Always whenever we are creating a CBC we have to get our props into constructor and do a super(props) . WHY? Search..
  // constructor is a place that is used for initialization
  // whenever a New Instance of class is created.. whenever this component is rendered.. a constructor is CALLED.. AND THIS IS THE BEST PLACE TO CREATE OUT STATE VARIABLES.
  constructor(props) {
    super(props)
    // Create State. React gives Acess to this.state

    this.state = {
      count: 0,
      // React uses ONE (BIG) Object to maintain all state variables. Even in Functional Components BTS
      count2: 0,
    }
  }
  render() {
    // DE-Structuring
    const { count } = this.state

    return (
      <div>
        <h1> Profile Class Component</h1>
        {/* We'll get props here by using this.props */}
        <h2> Name: {this.props.name}</h2>
        <h3> Count: {count} </h3>
        {/* we use `setCount` bcoz React TRACKS it.. It uses it to trigger the Reconciliation Process.. to keep the UI in sync with state variable.. ie whenever out state variables changes it UPDATES the UI  */}
        {/* WE DONOT MUTATE STATE DIRECTLY */}
        <button
          onClick={() => {
            // we should not use this.state.count = 1
            // we donot MUTATE state DIRECTLY
            // this.setState(`pass the modified OBJECTS`)
            this.setState({
              count: 1,
              count2: 1,
            })
          }}
        >
          setCount
        </button>
      </div>
    )
  }
}

export default Profile

TS: 1:11:00 
IN what sequence the code gets executed
#4 React Life Cycle

- Every Class has a life cycle.
- when we go into life cycle 

first a constructor is CALLED
then component is render

1) constructor
2) render

TS: 1:14:00 
- How to use `useEffect` in CBCc.

Remember the LifeCycle of the COMPONENT RUNS


1. first the `Constructor` is called
2. then tje component is  render'ed
3. then the `componentDidMount` method is called

#5
So now what is best place to call the API in a CBC
ANS: componentDidMount

import React from 'react'

class Profile extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      count: 0,
    }
    console.log('Child - Constructor')
  }

  componentDidMount() {
    // BEST PLACE for API CALLS
    // this will be called AFTER render
    console.log('Child - ComponentDidMount')
  }

  render() {
    // DE-Structuring
    const { count } = this.state
    console.log('Child - render')
    return (
      <div>
        <h1> Profile Class Component</h1>
        <h2> Name: {this.props.name}</h2>
        <h3> Count: {count} </h3>
        <button
          onClick={() => {
            this.setState({
              count: 1,
            })
          }}
        >
          setCount
        </button>
      </div>
    )
  }
}

export default Profile


-----------

TS: 1:34:00
#6 Amazing interview like question. Seq of execution

About.js and its child ProfileClass.js

console------------



TS: 1:41:00 with 1 child

1 Parent - Constructor
2 Parent - render
3 Child - Constructor
4 Child - render
5 Child - componentDidMount
6 Parent - componentDidMount


VERY IMPORTANT CONCEPT CLASS LifeCycle

TS: 1:43:17
with two children

1 Parent - Constructor
2 Parent - render
    3 constructor 1st child
    4 render 1st child
(O.O) observe here... REMEMBER componentDidMount will be called AFTER INITIAL/DEFAULT RENDER.
`React `
(O.O) TS: 1:58:00 for clear understading
     now we call componentDidMount - 1st Child 
     it will make an API call and 2nd child will stay. so it will batch up the render phase for the 1st and 2nd child.
    5 constructor 2nd child
    6 render 2nd child    
        // RENDER PHASE FINISHED

    --- DOM UPDATED FOR CHILDREN ---- 

   // COMMIT PHASE STARTED     
    7 componentDidMount 1st child
    8 componentDidMount 2nd child
9 Parent - componentDidMount  

with Class based components 
 it was very confusing 
 what is rendering when 
 what life cycle methods are going where 

 when React is rendering things up 
 it does it in 2 phases

1) render phase
2) commit phase

- render phase includes 
    constructor
    render method
- commit phase is the place where React actually modifies the DOM
    componentDidMount is called after the render ie react actually updates the DOM

    commit phase is slow as it needs to update the DOM
    so react BATCHES UP THINGS INSIDE render phase for the children


TS: 2:20:30 -- (`--` means go backwards)
/*
* Parent cons
* Parent render
* child const
* child render
* (O.O) OBSERVER parent - componentDidMount -- it is called before making an API call 
why? bcoz React finisheds render cycles first then it goes to the commit cycles. 
initially react will render things for us and children componentDidMount will be called later because we are using async and it will take some time to data to load. so that is why it is calling in this sequence.
PLEASE THINK AGAIN go thorough it . 
*
* DOM is updated
* json is logged in console.
* child componentDidMount
* child render

*/

In the prev (not the above, before above) there was no DATA LOAD (API CALL) in the componentDidMount({.. }) so they got printed before the `parent componentDidMount`

    but in the next (above) there was an API call.. so `parent componentDidMount` got printed before the `child componentDidMount`

----- TS: 2:34:35 
COMPLETE REACT COMPONENT LifeCycle

import React from 'react'

class Profile extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      userInfo: {
        name: 'Dummy Name',
        location: 'Dummy Location',
      },
    }
    console.log('Child - Constructor ' + this.props.name)
  }

  // componentDidMount() will be called after the first render
  async componentDidMount() {
    console.log('inside componentDidMount Loading data')
    const data = await fetch('https://api.github.com/users/vamsheeteja')
    const json = await data.json()
    console.log(json)

    // after API call we are setState it will RE-RENDER/ UPDATING START . triggers Reconciliation
    this.setState({
      userInfo: json,
    })

    // Search hw.
    // We can write async componentDidMount()..here
    // But we cannot make useEffect() async.. WHY?

    console.log('Child - ComponentDidMount ' + this.props.name)
  }

  // componentDidUpdate() will be called after every render
  componentDidUpdate() {
    console.log('Component Did update')
  }

  // componentWillUnmount will be called before this component will unmount(go) from the DOM ie if we go to another page.
  componentWillUnmount() {
    console.log('Compent will unmount')
  }

  render() {
    // DE-Structuring
    const { avatar_url, name, location } = this?.state?.userInfo
    console.log('Child - render ' + this.props.name)

    return (
      <div>
        <h1> Profile Class Component</h1>
        <img src={avatar_url} />
        <h2> Name: {name}</h2>
        <h3> Location: {location} </h3>
      </div>
    )
  }
}

/*
* Parent cons
* Parent render
* child const
* child render
* (O.O) OBSERVER parent - componentDidMount -- it is called before making an API call 
why? bcoz React finisheds render cycles first then it goes to the commit cycles. 
initially react will render things for us and children componentDidMount will be called later because we are using async and it will take some time to data to load. so that is why it is calling in this sequence.
PLEASE THINK AGAIN go thorough it . 
*
* DOM is updated
* json is logged in console.
* child componentDidMount
* child render
* componentDidUpdate

*/

export default Profile


async componentDidMount() {
    console.log('inside componentDidMount Loading data')
    const data = await fetch('https://api.github.com/users/vamsheeteja')
    const json = await data.json()
    console.log(json)

    // after API call we are setState it will RE-RENDER/ UPDATING START . triggers Reconciliation
    this.setState({
      userInfo: json,
    })

    // Search hw.
    // We can write async componentDidMount()..here
    // But we cannot make useEffect() async.. WHY?

    console.log('Child - ComponentDidMount ' + this.props.name)
  }

====================================

1) NEVER-EVER COMPARE REACT'S LIFECYCLE TO FUNCTIONAL COMPONENTS
-- USEeffect is not using componentDidMount bts. It is completely differenvt


import React from 'react'

class Profile extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      userInfo: {
        name: 'Dummy Name',
        location: 'Dummy Location',
      },
    }
    console.log('Child - Constructor ' + this.props.name)
  }

  // single page application also do have cons init
  componentDidMount() {
    this.timer = setInterval(() => {
      console.log('Namaste React OP')
    }, 1000)
    // (O.O) when we move on to another component the interval again start..
    // like called 2nt time interval will be twice 1 3 5.. called 3rd time thrice 1 4 7 10 ...
    // SPA was most powerful but this is a Bad thing
    // this is bcoz we are not Reloading the page,
    // Performance loss is happening..
    // to CLEAR this setInterval using componentUnmount

    console.log('Component did mount')
  }

  // componentDidUpdate() will be called after every render
  componentDidUpdate() {
    console.log('Component Did update')
  }

  // componentWillUnmount will be called before this component will unmount(go) from the DOM ie if we go to another page.
  componentWillUnmount() {
    clearInterval(this.timer)
    console.log('CompentWillUnmount')
  }

  render() {
    // DE-Structuring
    const { avatar_url, name, location } = this?.state?.userInfo
    console.log('Child - render ' + this.props.name)

    return (
      <div>
        <h1> Profile Class Component</h1>
        <img src={avatar_url} />
        <h2> Name: {name}</h2>
        <h3> Location: {location} </h3>
      </div>
    )
  }
}

export default Profile

-----------------=====================-----------------

Lecture - 9 Optimizing our App1

L-8 Recap

16:20 Batching : Render phase was being batch

3 things 
Mounting
Updating 
Unmounting

every time we load a component 
the first time the component is mounted..

if the component does not have state 
update will happen 0 time ie there will be 0 update 
no states, no props, no update

IMPORTANT
// O>O create a nested child parent relationship and try to do console.log and see how lifecycle methods work.

componentWillUnmount() used for clean up operations..

-------------------Todays class

HOOKs used till now
useState()  from React
useEffect() from React
useParams() form react-router-dom

Building Custom Hooks.

why do we even build Hooks ?
  Readability
  Reusability
  Seperation of Concern (Maintainability)

  we can wrap up a small logic into a function and use it anywhere in the code.

created a new foder src/utils
create a new file helper.js

Readable: we need to abstract the LOGIC. It makes our code much more Readable.
Reusable: if we want to apply the same logic again some where in later
  - There should be a COMMON place where we can store our Utility functions and later import and use them.
  - A best practice in industry is to use a `src/utils` 

Testable: Bcoz i can write separate test case for my function. I can test that function individually.
Maintainable: It is easy to Debug.

Hooks are kind of used for the same reason as at the EOD there are also functions

Modularity ?
we have broken down code into meaningful pieces.
we have made a separate file for shimmer logic.

Creating custom hook..

In file RestaurantMenu.js
the RestaurantMenu component is doing 2 things..

  1 it is fetching data 
  2 it is displaying data

  can we extract some more logic from this component ? Yes the API call

  the RestaurantMenu component is trying to 
  1 get the restaurant info. id
  2 get the details from the server of that restaurant
  3 display 

  so lets create a helper hook that will help us get the restaurant details.

  IMP thing NOTE: when ever you are creating a hook, create it using a new file. 
  create a HOOK using `use` prefix it is a React way of designing HOOK

  # TS: 37:00 creating CUSTOM HOOKs

  45:00 - 50:00

How is Hook differently working as Compared to a functional component ?
  It is function that return a JSX
Hook does not need to return some JSX. It is a piece of JS code that extracts some Logic out of it.

It will return some value, js, Object

useState return some array
useParams return some value.
useEffect returh some idk. it is not used in such a way.

IMP TS: how that render stuff is will work .. 
TS: 53:00 VERY IMPORTANT STUFF the hook is having its own Reconciliation algorithm going on.

==== HW.. extract the fetch logic from body.js ==================

-- Developing a new Feature using HOOKS.


if user is offline say you are offline.. restrict the user to click on any of navbar items

#1:03:00
isOnline feature

js eventlistner `windowOnline` tracks status 

Q. Why do we make a HOOK? what exactly is a HOOK different from a normal JS function?
  In normal JS function:
  - we cant define state variables
  - the react reconcile algorithm will not trigger 
  - no useEffect() 

-- created new file in utils `useOnline` HOOK

Body.js ----

import { useEffect, useState } from 'react'

const useOnline = () => {
  // i want to change my status of online should automatically change.. so i will use a STATE variable for it to maintain the state
  const [isOnline, setIsOnline] = useState(true)

  // run the (set the) eventListener just ONCE, when ever my page loads, my eventListener should be tracked once. ie by using useEffect with empty dependency array

  useEffect(() => {
    // write a logic to keep on updating my online status whenever user go offline and go online.

    const handleOnline = window.addEventListener('online', () => {
      setIsOnline(true)
    })
    const handleOffline = window.addEventListener('offline', () => {
      setIsOnline(false)
    })

    return () => {
      // whenever i have to remove an event listener i have to pass in the SAME function that i have created
      window.removeEventListener('online', handleOnline)
      window.removeEventListener('offline', handleOffline)
    }
  }, [])

  // a Senior Dev code
  // we have to clean the cache. Whenever we add a event listener we need to clean up the eventListener.
  // wheneever we go offline and coming online..
  // TS 1:29:00
  // when we go to about us page the eventlistener is still there. but we need the event listener only when we are on the body page.
  // So good practice to clear the mess that we are creating

  // it return the status (boolean)
  return isOnline
}

export default useOnline

------------------------------------------------------
#1:50:00

Parcel is the beast 
job of bundler minification, treeshaking, optimizations, hmr

basic job = bundling things

it should bundle our code.

parcel produces ONE js file for our whole project all code and components.. it creates ONE js file

when you make a BIG application there might be hundredss of components....
if you Bundle them all in one js file when it would be whole Humangouss HUGEEE....bundled file..

if the budled file is that so Humangous then it would just blast .. make our app very slow..

Large Scale production Ready applications 
  - they cannot work / created by just one Bubdle..
  - solution is we should do 
  
      CHUNKING or 
      CODE SPLITTING or 
      DYNAMIC BUNDLING or 
      LAZY LOADING.

- Bundling is good upto some level.
- Few lines of code will optimize our application to next level..🔥🔥

How would WE split it ?
  Make bundle size smaller but keep it logical. 


Q) system desing interview : how will you build a website like makemytrip ?

  When i will we using webpack or parcel (bundling)
  - i will make sure that i will be using code splitting everywhere..
  - i will make sure that my bundle does not include random code..
  - logical bundling..

It does not make sense of loading all the components at the homes page 

i will LOAD specific (clicked) component at the runtime or when it is clicked and should RENDER it.
  this is also known as
                  - ON DEMAND LOADING
                  - DYNAMIC IMPORT
  
____________________________________________________________________________
  TS: 2:24:00 we are getting error component just before dynamic loading. 
  ---------------------------------------------------------------------------

  -- we are getting that error bcoz lazy loading takes a fraction of seconds to load the component into our page. 
  and react kind of tries to RENDER the component which is yet to be loaded ... 
  so it will susupend the operation..

  on the second time click it is coming as it is now loaded into out SPA ....

  TS: 2:30:43 suspense   
      App.js
      {
        path: '/instamart',
        element: (
          <Suspense>
            <Instamart />
          </Suspense>
        ),
      },
 
  Now after adding <Suspense> we will not get the error page.
  now it loads well

  when we write <Suspense>, React takes care of these components in a different Fashion.
  Now React will know that those components will be Lazy loaded, dynamically loaded.
  So React waits for the promise to resolve.

  lazy(() => import...) import is a promise

  <Suspense fallback={} >

  fallback is props that you pass what should be displayed until the component(instamart) is loaded.



  Lec-9 Recap

  - created our own Hooks
    useFetch()
    useOnline()

    Chunking/ Bundle Splitting/ On Demand Loading

  - lazy()
    <Suspense fallback={} >
         ...

    </Suspense>


Never ever try to Dynamically Load a component inside another component. (be clear)
  beacause it will be lazy loaded after every render.

  DO lazy LOAD immediately following the import statements

  _______________________________LECTURE-9 END___________________________________


Things to be done after chapter-09 which i havent done

create some hooks
extract logic from body.js

revise namaste js.